<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnTimKiem.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>